name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Compilation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Check library code
        run: cargo check --lib --verbose
      
      - name: Check binary code
        run: cargo check --bins --verbose
      
      - name: Check all targets
        run: cargo check --all-targets --verbose

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [1.82.0, stable]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: intellirouter-${{ matrix.os }}-${{ matrix.rust }}
          path: target/debug/intellirouter
          if-no-files-found: error

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [check, build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Run unit tests
        run: cargo test --lib --verbose
      
      - name: Run integration tests
        run: cargo test --test integration_tests --verbose
      
      - name: Run e2e tests
        run: cargo test --test e2e_tests --verbose
      
      - name: Run property tests
        run: cargo test --test property_tests --verbose
      
      - name: Run custom test runner
        run: cargo run --bin run_tests --features test-utils -- test integration
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy -- -D warnings

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run cargo-audit
        run: cargo audit
      
      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: llvm-tools-preview
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      
      - name: Generate code coverage
        run: cargo llvm-cov --lcov --output-path lcov.info
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  warnings:
    name: Warning Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Run warning analyzer
        run: ./scripts/analyze_warnings.sh --allow-errors
      
      - name: Upload warning report
        uses: actions/upload-artifact@v4
        with:
          name: warning-report
          path: warning_report.md
          if-no-files-found: warn

 compilation_tool_tests:
   name: Compilation Tool Tests
   runs-on: ubuntu-latest
   needs: [check, warnings]
   steps:
     - uses: actions/checkout@v4
     
     - name: Install Rust
       uses: dtolnay/rust-toolchain@master
       with:
         toolchain: 1.82.0
         components: rustfmt, clippy
     
     - name: Rust Cache
       uses: Swatinem/rust-cache@v2
     
     - name: Install jq
       run: sudo apt-get install -y jq
     
     - name: Run compilation check tests
       run: cargo test --test test_compilation_check -- --test-threads=1
     
     - name: Run warning analyzer tests
       run: ./tests/compilation_tools/test_warning_analyzer.sh

 verify_production_build:
   name: Verify Production Build
   runs-on: ubuntu-latest
   needs: [build, test]
   steps:
     - uses: actions/checkout@v4
     
     - name: Install Rust
       uses: dtolnay/rust-toolchain@master
       with:
         toolchain: 1.82.0
     
     - name: Rust Cache
       uses: Swatinem/rust-cache@v2
     
     - name: Make verification script executable
       run: chmod +x ./scripts/verify_production_build.sh
     
     - name: Verify production build
       run: ./scripts/verify_production_build.sh
     
     - name: Check production binary size
       run: |
         cargo build --release
         ls -lh target/release/intellirouter