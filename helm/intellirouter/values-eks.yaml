# EKS specific values for intellirouter

service:
  type: ClusterIP

ingress:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/healthcheck-path: /health
  hosts:
    - host: intellirouter.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: intellirouter-tls
      hosts:
        - intellirouter.example.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Use EBS for persistence
persistence:
  logs:
    enabled: true
    size: 5Gi
    storageClass: "gp2"
  documents:
    enabled: true
    size: 10Gi
    storageClass: "gp2"
  personas:
    enabled: true
    size: 5Gi
    storageClass: "gp2"

chromadb:
  persistence:
    enabled: true
    size: 20Gi
    storageClass: "gp2"
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
    limits:
      memory: 2Gi
      cpu: 1000m

redis:
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "gp2"
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 500m

# Use node selectors for EKS
nodeSelector:
  eks.amazonaws.com/nodegroup: intellirouter

# Role-specific configuration with more replicas for production
roles:
  - name: router
    replicas: 2
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    config:
      INTELLIROUTER_ROLE: Router
  - name: orchestrator
    replicas: 2
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    config:
      INTELLIROUTER_ROLE: ChainEngine
  - name: rag-injector
    replicas: 2
    resources:
      limits:
        cpu: 1000m
        memory: 1.5Gi
      requests:
        cpu: 500m
        memory: 1Gi
    config:
      INTELLIROUTER_ROLE: RagManager
  - name: summarizer
    replicas: 2
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    config:
      INTELLIROUTER_ROLE: PersonaLayer

# Enable autoscaling for production
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Enable network policies for production
networkPolicy:
  enabled: true

# Ollama configuration (optional)
ollama:
  enabled: false  # Disabled by default in cloud environments
  persistence:
    enabled: true
    size: 20Gi
    storageClass: "gp2"
  resources:
    requests:
      memory: 4Gi
      cpu: 2000m
    limits:
      memory: 8Gi
      cpu: 4000m
  # GPU support
  gpu:
    enabled: false  # Set to true if using GPU nodes

# Installation guide
# 1. Create an EKS cluster with appropriate node groups:
#    eksctl create cluster -f eks-cluster.yaml
# 2. Install the AWS Load Balancer Controller:
#    helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
#      -n kube-system \
#      --set clusterName=<your-cluster-name> \
#      --set serviceAccount.create=false \
#      --set serviceAccount.name=aws-load-balancer-controller
# 3. Install the Helm chart:
#    helm install intellirouter ./helm/intellirouter -f ./helm/intellirouter/values-eks.yaml
# 4. Configure DNS to point to the ALB endpoint