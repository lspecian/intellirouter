// This file is @generated by prost-build.
/// ChainStep represents a step in a chain
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainStep {
    /// Unique identifier for the step
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Description of the step
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Model to use for this step (optional)
    #[prost(string, tag = "3")]
    pub model: ::prost::alloc::string::String,
    /// System prompt for this step (optional)
    #[prost(string, tag = "4")]
    pub system_prompt: ::prost::alloc::string::String,
    /// Input template for this step
    #[prost(string, tag = "5")]
    pub input_template: ::prost::alloc::string::String,
    /// Output format for this step (optional)
    #[prost(string, tag = "6")]
    pub output_format: ::prost::alloc::string::String,
    /// Maximum tokens to generate (optional)
    #[prost(uint32, tag = "7")]
    pub max_tokens: u32,
    /// Temperature for generation (optional)
    #[prost(float, tag = "8")]
    pub temperature: f32,
    /// Additional parameters for this step
    #[prost(map = "string, string", tag = "9")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Chain represents a chain configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chain {
    /// Unique identifier for the chain
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the chain
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Description of the chain
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Steps in the chain
    #[prost(message, repeated, tag = "4")]
    pub steps: ::prost::alloc::vec::Vec<ChainStep>,
    /// Version of the chain
    #[prost(message, optional, tag = "5")]
    pub version: ::core::option::Option<super::super::common::v1::VersionInfo>,
    /// Additional metadata about the chain
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::super::common::v1::Metadata>,
}
/// ChainExecutionRequest is sent to execute a chain
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainExecutionRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Input for the chain
    #[prost(string, tag = "4")]
    pub input: ::prost::alloc::string::String,
    /// Variables to use during execution
    #[prost(map = "string, string", tag = "5")]
    pub variables: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Whether to stream the results
    #[prost(bool, tag = "6")]
    pub stream: bool,
    /// Timeout for the execution in seconds
    #[prost(uint32, tag = "7")]
    pub timeout_seconds: u32,
    /// Chain to execute
    #[prost(oneof = "chain_execution_request::ChainIdentifier", tags = "2, 3")]
    pub chain_identifier: ::core::option::Option<
        chain_execution_request::ChainIdentifier,
    >,
}
/// Nested message and enum types in `ChainExecutionRequest`.
pub mod chain_execution_request {
    /// Chain to execute
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChainIdentifier {
        /// Chain ID to execute
        #[prost(string, tag = "2")]
        ChainId(::prost::alloc::string::String),
        /// Inline chain definition
        #[prost(message, tag = "3")]
        Chain(super::Chain),
    }
}
/// ChainExecutionResponse is returned after executing a chain
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainExecutionResponse {
    /// Execution ID
    #[prost(string, tag = "1")]
    pub execution_id: ::prost::alloc::string::String,
    /// Status of the execution
    #[prost(enumeration = "super::super::common::v1::Status", tag = "2")]
    pub status: i32,
    /// Output of the chain
    #[prost(string, tag = "3")]
    pub output: ::prost::alloc::string::String,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
    /// Execution start time
    #[prost(message, optional, tag = "5")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Execution end time
    #[prost(message, optional, tag = "6")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Step results
    #[prost(message, repeated, tag = "7")]
    pub step_results: ::prost::alloc::vec::Vec<StepResult>,
    /// Total tokens used
    #[prost(uint32, tag = "8")]
    pub total_tokens: u32,
    /// Additional metadata about the execution
    #[prost(message, optional, tag = "9")]
    pub metadata: ::core::option::Option<super::super::common::v1::Metadata>,
}
/// StepResult represents the result of executing a step
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepResult {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Status of the step
    #[prost(enumeration = "super::super::common::v1::Status", tag = "2")]
    pub status: i32,
    /// Input to the step
    #[prost(string, tag = "3")]
    pub input: ::prost::alloc::string::String,
    /// Output from the step
    #[prost(string, tag = "4")]
    pub output: ::prost::alloc::string::String,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
    /// Step start time
    #[prost(message, optional, tag = "6")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Step end time
    #[prost(message, optional, tag = "7")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Tokens used by this step
    #[prost(uint32, tag = "8")]
    pub tokens: u32,
    /// Model used for this step
    #[prost(string, tag = "9")]
    pub model: ::prost::alloc::string::String,
    /// Additional metadata about the step execution
    #[prost(message, optional, tag = "10")]
    pub metadata: ::core::option::Option<super::super::common::v1::Metadata>,
}
/// ChainStatusRequest is sent to get the status of a chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainStatusRequest {
    /// Execution ID
    #[prost(string, tag = "1")]
    pub execution_id: ::prost::alloc::string::String,
}
/// ChainStatusResponse is returned with the status of a chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainStatusResponse {
    /// Execution ID
    #[prost(string, tag = "1")]
    pub execution_id: ::prost::alloc::string::String,
    /// Status of the execution
    #[prost(enumeration = "super::super::common::v1::Status", tag = "2")]
    pub status: i32,
    /// Current step ID (if in progress)
    #[prost(string, tag = "3")]
    pub current_step_id: ::prost::alloc::string::String,
    /// Completed steps
    #[prost(uint32, tag = "4")]
    pub completed_steps: u32,
    /// Total steps
    #[prost(uint32, tag = "5")]
    pub total_steps: u32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "6")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
    /// Execution start time
    #[prost(message, optional, tag = "7")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Execution update time
    #[prost(message, optional, tag = "8")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// CancelChainRequest is sent to cancel a chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelChainRequest {
    /// Execution ID
    #[prost(string, tag = "1")]
    pub execution_id: ::prost::alloc::string::String,
}
/// CancelChainResponse is returned after cancelling a chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelChainResponse {
    /// Execution ID
    #[prost(string, tag = "1")]
    pub execution_id: ::prost::alloc::string::String,
    /// Whether the cancellation was successful
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// Error details (if not successful)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// ChainExecutionEvent is streamed during chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainExecutionEvent {
    /// Event type
    #[prost(enumeration = "EventType", tag = "1")]
    pub r#type: i32,
    /// Execution ID
    #[prost(string, tag = "2")]
    pub execution_id: ::prost::alloc::string::String,
    /// Event timestamp
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Event data
    #[prost(oneof = "chain_execution_event::Data", tags = "4, 5, 6, 7, 8, 9")]
    pub data: ::core::option::Option<chain_execution_event::Data>,
}
/// Nested message and enum types in `ChainExecutionEvent`.
pub mod chain_execution_event {
    /// Event data
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        /// Step started event
        #[prost(message, tag = "4")]
        StepStarted(super::StepStartedEvent),
        /// Step completed event
        #[prost(message, tag = "5")]
        StepCompleted(super::StepCompletedEvent),
        /// Step failed event
        #[prost(message, tag = "6")]
        StepFailed(super::StepFailedEvent),
        /// Chain completed event
        #[prost(message, tag = "7")]
        ChainCompleted(super::ChainCompletedEvent),
        /// Chain failed event
        #[prost(message, tag = "8")]
        ChainFailed(super::ChainFailedEvent),
        /// Token generated event
        #[prost(message, tag = "9")]
        TokenGenerated(super::TokenGeneratedEvent),
    }
}
/// StepStartedEvent is sent when a step starts
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepStartedEvent {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Step index
    #[prost(uint32, tag = "2")]
    pub step_index: u32,
    /// Input to the step
    #[prost(string, tag = "3")]
    pub input: ::prost::alloc::string::String,
}
/// StepCompletedEvent is sent when a step completes
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepCompletedEvent {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Step index
    #[prost(uint32, tag = "2")]
    pub step_index: u32,
    /// Output from the step
    #[prost(string, tag = "3")]
    pub output: ::prost::alloc::string::String,
    /// Tokens used by this step
    #[prost(uint32, tag = "4")]
    pub tokens: u32,
}
/// StepFailedEvent is sent when a step fails
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepFailedEvent {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Step index
    #[prost(uint32, tag = "2")]
    pub step_index: u32,
    /// Error details
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// ChainCompletedEvent is sent when a chain completes
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainCompletedEvent {
    /// Output of the chain
    #[prost(string, tag = "1")]
    pub output: ::prost::alloc::string::String,
    /// Total tokens used
    #[prost(uint32, tag = "2")]
    pub total_tokens: u32,
    /// Execution time in milliseconds
    #[prost(uint64, tag = "3")]
    pub execution_time_ms: u64,
}
/// ChainFailedEvent is sent when a chain fails
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainFailedEvent {
    /// Error details
    #[prost(message, optional, tag = "1")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
    /// Execution time in milliseconds
    #[prost(uint64, tag = "2")]
    pub execution_time_ms: u64,
}
/// TokenGeneratedEvent is sent when a token is generated
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenGeneratedEvent {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Token
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
}
/// EventType represents the type of chain execution event
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EventType {
    /// Default value, should not be used
    Unspecified = 0,
    /// Step started
    StepStarted = 1,
    /// Step completed
    StepCompleted = 2,
    /// Step failed
    StepFailed = 3,
    /// Chain completed
    ChainCompleted = 4,
    /// Chain failed
    ChainFailed = 5,
    /// Token generated
    TokenGenerated = 6,
}
impl EventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EventType::Unspecified => "EVENT_TYPE_UNSPECIFIED",
            EventType::StepStarted => "EVENT_TYPE_STEP_STARTED",
            EventType::StepCompleted => "EVENT_TYPE_STEP_COMPLETED",
            EventType::StepFailed => "EVENT_TYPE_STEP_FAILED",
            EventType::ChainCompleted => "EVENT_TYPE_CHAIN_COMPLETED",
            EventType::ChainFailed => "EVENT_TYPE_CHAIN_FAILED",
            EventType::TokenGenerated => "EVENT_TYPE_TOKEN_GENERATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "EVENT_TYPE_STEP_STARTED" => Some(Self::StepStarted),
            "EVENT_TYPE_STEP_COMPLETED" => Some(Self::StepCompleted),
            "EVENT_TYPE_STEP_FAILED" => Some(Self::StepFailed),
            "EVENT_TYPE_CHAIN_COMPLETED" => Some(Self::ChainCompleted),
            "EVENT_TYPE_CHAIN_FAILED" => Some(Self::ChainFailed),
            "EVENT_TYPE_TOKEN_GENERATED" => Some(Self::TokenGenerated),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod chain_engine_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ChainEngineService provides methods for chain execution and management
    #[derive(Debug, Clone)]
    pub struct ChainEngineServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ChainEngineServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ChainEngineServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ChainEngineServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ChainEngineServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ExecuteChain executes a chain with the given input
        pub async fn execute_chain(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainExecutionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainExecutionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.chain_engine.v1.ChainEngineService/ExecuteChain",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.chain_engine.v1.ChainEngineService",
                        "ExecuteChain",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetChainStatus gets the status of a chain execution
        pub async fn get_chain_status(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.chain_engine.v1.ChainEngineService/GetChainStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.chain_engine.v1.ChainEngineService",
                        "GetChainStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CancelChainExecution cancels a running chain execution
        pub async fn cancel_chain_execution(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelChainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelChainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.chain_engine.v1.ChainEngineService/CancelChainExecution",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.chain_engine.v1.ChainEngineService",
                        "CancelChainExecution",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// StreamChainExecution streams the results of a chain execution
        pub async fn stream_chain_execution(
            &mut self,
            request: impl tonic::IntoRequest<super::ChainExecutionRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ChainExecutionEvent>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.chain_engine.v1.ChainEngineService/StreamChainExecution",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.chain_engine.v1.ChainEngineService",
                        "StreamChainExecution",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod chain_engine_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ChainEngineServiceServer.
    #[async_trait]
    pub trait ChainEngineService: Send + Sync + 'static {
        /// ExecuteChain executes a chain with the given input
        async fn execute_chain(
            &self,
            request: tonic::Request<super::ChainExecutionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainExecutionResponse>,
            tonic::Status,
        >;
        /// GetChainStatus gets the status of a chain execution
        async fn get_chain_status(
            &self,
            request: tonic::Request<super::ChainStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ChainStatusResponse>,
            tonic::Status,
        >;
        /// CancelChainExecution cancels a running chain execution
        async fn cancel_chain_execution(
            &self,
            request: tonic::Request<super::CancelChainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelChainResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamChainExecution method.
        type StreamChainExecutionStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ChainExecutionEvent, tonic::Status>,
            >
            + Send
            + 'static;
        /// StreamChainExecution streams the results of a chain execution
        async fn stream_chain_execution(
            &self,
            request: tonic::Request<super::ChainExecutionRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamChainExecutionStream>,
            tonic::Status,
        >;
    }
    /// ChainEngineService provides methods for chain execution and management
    #[derive(Debug)]
    pub struct ChainEngineServiceServer<T: ChainEngineService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ChainEngineService> ChainEngineServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ChainEngineServiceServer<T>
    where
        T: ChainEngineService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/intellirouter.chain_engine.v1.ChainEngineService/ExecuteChain" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteChainSvc<T: ChainEngineService>(pub Arc<T>);
                    impl<
                        T: ChainEngineService,
                    > tonic::server::UnaryService<super::ChainExecutionRequest>
                    for ExecuteChainSvc<T> {
                        type Response = super::ChainExecutionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChainExecutionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChainEngineService>::execute_chain(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExecuteChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.chain_engine.v1.ChainEngineService/GetChainStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetChainStatusSvc<T: ChainEngineService>(pub Arc<T>);
                    impl<
                        T: ChainEngineService,
                    > tonic::server::UnaryService<super::ChainStatusRequest>
                    for GetChainStatusSvc<T> {
                        type Response = super::ChainStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChainStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChainEngineService>::get_chain_status(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetChainStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.chain_engine.v1.ChainEngineService/CancelChainExecution" => {
                    #[allow(non_camel_case_types)]
                    struct CancelChainExecutionSvc<T: ChainEngineService>(pub Arc<T>);
                    impl<
                        T: ChainEngineService,
                    > tonic::server::UnaryService<super::CancelChainRequest>
                    for CancelChainExecutionSvc<T> {
                        type Response = super::CancelChainResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelChainRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChainEngineService>::cancel_chain_execution(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CancelChainExecutionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.chain_engine.v1.ChainEngineService/StreamChainExecution" => {
                    #[allow(non_camel_case_types)]
                    struct StreamChainExecutionSvc<T: ChainEngineService>(pub Arc<T>);
                    impl<
                        T: ChainEngineService,
                    > tonic::server::ServerStreamingService<super::ChainExecutionRequest>
                    for StreamChainExecutionSvc<T> {
                        type Response = super::ChainExecutionEvent;
                        type ResponseStream = T::StreamChainExecutionStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ChainExecutionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ChainEngineService>::stream_chain_execution(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamChainExecutionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ChainEngineService> Clone for ChainEngineServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ChainEngineService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ChainEngineService> tonic::server::NamedService
    for ChainEngineServiceServer<T> {
        const NAME: &'static str = "intellirouter.chain_engine.v1.ChainEngineService";
    }
}
