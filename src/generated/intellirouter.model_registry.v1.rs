// This file is @generated by prost-build.
/// ModelCapabilities represents the capabilities of a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelCapabilities {
    /// Whether the model supports streaming
    #[prost(bool, tag = "1")]
    pub streaming: bool,
    /// Whether the model supports function calling
    #[prost(bool, tag = "2")]
    pub function_calling: bool,
    /// Whether the model supports vision
    #[prost(bool, tag = "3")]
    pub vision: bool,
    /// Whether the model supports audio
    #[prost(bool, tag = "4")]
    pub audio: bool,
    /// Whether the model supports tools
    #[prost(bool, tag = "5")]
    pub tools: bool,
    /// Whether the model supports JSON mode
    #[prost(bool, tag = "6")]
    pub json_mode: bool,
    /// Whether the model supports parallel function calling
    #[prost(bool, tag = "7")]
    pub parallel_function_calling: bool,
    /// Whether the model supports response format
    #[prost(bool, tag = "8")]
    pub response_format: bool,
    /// Whether the model supports seed
    #[prost(bool, tag = "9")]
    pub seed: bool,
    /// Additional capabilities
    #[prost(string, repeated, tag = "10")]
    pub additional_capabilities: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
}
/// ConnectorConfig represents configuration for a model connector
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConnectorConfig {
    /// Type of connector
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// Endpoint URL
    #[prost(string, tag = "2")]
    pub endpoint_url: ::prost::alloc::string::String,
    /// API key (should be handled securely)
    #[prost(string, tag = "3")]
    pub api_key: ::prost::alloc::string::String,
    /// Organization ID
    #[prost(string, tag = "4")]
    pub org_id: ::prost::alloc::string::String,
    /// Timeout in milliseconds
    #[prost(uint32, tag = "5")]
    pub timeout_ms: u32,
    /// Maximum retries
    #[prost(uint32, tag = "6")]
    pub max_retries: u32,
    /// Additional configuration parameters
    #[prost(map = "string, string", tag = "7")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ModelMetadata represents metadata for a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelMetadata {
    /// Unique identifier for the model
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the model
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Provider of the model (e.g., "openai", "anthropic")
    #[prost(string, tag = "3")]
    pub provider: ::prost::alloc::string::String,
    /// Version of the model
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    /// Type of the model
    #[prost(enumeration = "ModelType", tag = "5")]
    pub r#type: i32,
    /// Status of the model
    #[prost(enumeration = "ModelStatus", tag = "6")]
    pub status: i32,
    /// Maximum context window size in tokens
    #[prost(uint32, tag = "7")]
    pub context_window: u32,
    /// Model capabilities
    #[prost(message, optional, tag = "8")]
    pub capabilities: ::core::option::Option<ModelCapabilities>,
    /// Cost per 1K tokens (input)
    #[prost(float, tag = "9")]
    pub cost_per_1k_input: f32,
    /// Cost per 1K tokens (output)
    #[prost(float, tag = "10")]
    pub cost_per_1k_output: f32,
    /// Average latency in milliseconds
    #[prost(float, tag = "11")]
    pub avg_latency_ms: f32,
    /// Maximum tokens per request
    #[prost(uint32, tag = "12")]
    pub max_tokens_per_request: u32,
    /// Maximum requests per minute
    #[prost(uint32, tag = "13")]
    pub max_requests_per_minute: u32,
    /// When the model was created
    #[prost(message, optional, tag = "14")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// When the model was last updated
    #[prost(message, optional, tag = "15")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// When the model was last checked
    #[prost(message, optional, tag = "16")]
    pub last_checked_at: ::core::option::Option<::prost_types::Timestamp>,
    /// Additional metadata about the model
    #[prost(map = "string, string", tag = "17")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Tags for categorization
    #[prost(string, repeated, tag = "18")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Connector configuration
    #[prost(message, optional, tag = "19")]
    pub connector_config: ::core::option::Option<ConnectorConfig>,
}
/// ModelFilter represents a filter for finding models
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelFilter {
    /// Filter by provider
    #[prost(string, repeated, tag = "1")]
    pub providers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Filter by type
    #[prost(enumeration = "ModelType", repeated, tag = "2")]
    pub types: ::prost::alloc::vec::Vec<i32>,
    /// Filter by status
    #[prost(enumeration = "ModelStatus", repeated, tag = "3")]
    pub statuses: ::prost::alloc::vec::Vec<i32>,
    /// Filter by minimum context window
    #[prost(uint32, tag = "4")]
    pub min_context_window: u32,
    /// Filter by required capabilities
    #[prost(message, optional, tag = "5")]
    pub required_capabilities: ::core::option::Option<ModelCapabilities>,
    /// Filter by maximum cost per 1K tokens (input)
    #[prost(float, tag = "6")]
    pub max_cost_per_1k_input: f32,
    /// Filter by maximum cost per 1K tokens (output)
    #[prost(float, tag = "7")]
    pub max_cost_per_1k_output: f32,
    /// Filter by maximum latency in milliseconds
    #[prost(float, tag = "8")]
    pub max_latency_ms: f32,
    /// Filter by tags (all tags must match)
    #[prost(string, repeated, tag = "9")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Filter by metadata (all metadata must match)
    #[prost(map = "string, string", tag = "10")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// RegisterModelRequest is sent to register a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterModelRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
}
/// RegisterModelResponse is returned after registering a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterModelResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Registered model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// GetModelRequest is sent to get a model by ID
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModelRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model ID
    #[prost(string, tag = "2")]
    pub model_id: ::prost::alloc::string::String,
}
/// GetModelResponse is returned with the requested model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetModelResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// UpdateModelRequest is sent to update a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateModelRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
}
/// UpdateModelResponse is returned after updating a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateModelResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Updated model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// RemoveModelRequest is sent to remove a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveModelRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model ID
    #[prost(string, tag = "2")]
    pub model_id: ::prost::alloc::string::String,
}
/// RemoveModelResponse is returned after removing a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveModelResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Removed model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// ListModelsRequest is sent to list models
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListModelsRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
}
/// ListModelsResponse is returned with the list of models
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListModelsResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Models
    #[prost(message, repeated, tag = "2")]
    pub models: ::prost::alloc::vec::Vec<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// FindModelsRequest is sent to find models matching a filter
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindModelsRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model filter
    #[prost(message, optional, tag = "2")]
    pub filter: ::core::option::Option<ModelFilter>,
}
/// FindModelsResponse is returned with the models matching the filter
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindModelsResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Models matching the filter
    #[prost(message, repeated, tag = "2")]
    pub models: ::prost::alloc::vec::Vec<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// UpdateModelStatusRequest is sent to update a model's status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateModelStatusRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model ID
    #[prost(string, tag = "2")]
    pub model_id: ::prost::alloc::string::String,
    /// New status
    #[prost(enumeration = "ModelStatus", tag = "3")]
    pub status: i32,
    /// Reason for the status update
    #[prost(string, tag = "4")]
    pub reason: ::prost::alloc::string::String,
}
/// UpdateModelStatusResponse is returned after updating a model's status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateModelStatusResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Updated model metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<ModelMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// CheckModelHealthRequest is sent to check a model's health
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckModelHealthRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Model ID
    #[prost(string, tag = "2")]
    pub model_id: ::prost::alloc::string::String,
    /// Timeout in milliseconds
    #[prost(uint32, tag = "3")]
    pub timeout_ms: u32,
}
/// CheckModelHealthResponse is returned with the model's health status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CheckModelHealthResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Health check result
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<HealthCheckResult>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// HealthCheckResult represents the result of a health check
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResult {
    /// Whether the model is healthy
    #[prost(bool, tag = "1")]
    pub healthy: bool,
    /// Latency in milliseconds
    #[prost(float, tag = "2")]
    pub latency_ms: f32,
    /// Error message (if not healthy)
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// When the health check was performed
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Additional details about the health check
    #[prost(map = "string, string", tag = "5")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// RoutingContext represents the context for a routing decision
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoutingContext {
    /// Original chat completion request
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<ChatCompletionRequest>,
    /// User ID (if available)
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// Organization ID (if available)
    #[prost(string, tag = "3")]
    pub org_id: ::prost::alloc::string::String,
    /// Request timestamp
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Request priority (higher values indicate higher priority)
    #[prost(uint32, tag = "5")]
    pub priority: u32,
    /// Request tags for categorization
    #[prost(string, repeated, tag = "6")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Additional context parameters
    #[prost(map = "string, string", tag = "7")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// RoutingRequest represents a request to route
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoutingRequest {
    /// Routing context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<RoutingContext>,
    /// Model filter for selecting eligible models
    #[prost(message, optional, tag = "2")]
    pub model_filter: ::core::option::Option<ModelFilter>,
    /// Preferred model ID (if any)
    #[prost(string, tag = "3")]
    pub preferred_model_id: ::prost::alloc::string::String,
    /// Excluded model IDs
    #[prost(string, repeated, tag = "4")]
    pub excluded_model_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Maximum routing attempts
    #[prost(uint32, tag = "5")]
    pub max_attempts: u32,
    /// Routing timeout in milliseconds
    #[prost(uint32, tag = "6")]
    pub timeout_ms: u32,
    /// Routing strategy to use
    #[prost(enumeration = "RoutingStrategy", tag = "7")]
    pub strategy: i32,
    /// Strategy-specific parameters
    #[prost(map = "string, string", tag = "8")]
    pub strategy_parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// RoutingMetadata represents metadata about a routing decision
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RoutingMetadata {
    /// ID of the selected model
    #[prost(string, tag = "1")]
    pub selected_model_id: ::prost::alloc::string::String,
    /// Name of the strategy that made the selection
    #[prost(string, tag = "2")]
    pub strategy_name: ::prost::alloc::string::String,
    /// Timestamp when routing started
    #[prost(message, optional, tag = "3")]
    pub routing_start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Timestamp when routing completed
    #[prost(message, optional, tag = "4")]
    pub routing_end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Total routing time in milliseconds
    #[prost(uint64, tag = "5")]
    pub routing_time_ms: u64,
    /// Number of models considered during routing
    #[prost(uint32, tag = "6")]
    pub models_considered: u32,
    /// Number of routing attempts made
    #[prost(uint32, tag = "7")]
    pub attempts: u32,
    /// Whether this was a fallback selection
    #[prost(bool, tag = "8")]
    pub is_fallback: bool,
    /// Selection criteria used (e.g., "lowest_cost", "lowest_latency")
    #[prost(string, tag = "9")]
    pub selection_criteria: ::prost::alloc::string::String,
    /// Additional metadata about the routing decision
    #[prost(map = "string, string", tag = "10")]
    pub additional_metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ChatCompletionRequest represents a chat completion request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionRequest {
    /// Model to use (may be overridden by routing)
    #[prost(string, tag = "1")]
    pub model: ::prost::alloc::string::String,
    /// Messages in the conversation
    #[prost(message, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<super::super::common::v1::Message>,
    /// Maximum tokens to generate
    #[prost(uint32, tag = "3")]
    pub max_tokens: u32,
    /// Temperature for generation
    #[prost(float, tag = "4")]
    pub temperature: f32,
    /// Top-p for generation
    #[prost(float, tag = "5")]
    pub top_p: f32,
    /// Number of completions to generate
    #[prost(uint32, tag = "6")]
    pub n: u32,
    /// Whether to stream the response
    #[prost(bool, tag = "7")]
    pub stream: bool,
    /// Stop sequences
    #[prost(string, repeated, tag = "8")]
    pub stop: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Presence penalty
    #[prost(float, tag = "9")]
    pub presence_penalty: f32,
    /// Frequency penalty
    #[prost(float, tag = "10")]
    pub frequency_penalty: f32,
    /// Logit bias
    #[prost(map = "string, float", tag = "11")]
    pub logit_bias: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    /// User identifier
    #[prost(string, tag = "12")]
    pub user: ::prost::alloc::string::String,
    /// Response format
    #[prost(message, optional, tag = "13")]
    pub response_format: ::core::option::Option<ResponseFormat>,
    /// Seed for deterministic generation
    #[prost(int64, tag = "14")]
    pub seed: i64,
    /// Tools available to the model
    #[prost(message, repeated, tag = "15")]
    pub tools: ::prost::alloc::vec::Vec<Tool>,
    /// Tool choice
    #[prost(message, optional, tag = "16")]
    pub tool_choice: ::core::option::Option<ToolChoice>,
    /// Additional parameters
    #[prost(map = "string, string", tag = "17")]
    pub additional_parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// ResponseFormat represents the format for the response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResponseFormat {
    /// Type of response format
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
}
/// Tool represents a tool available to the model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tool {
    /// Tool type
    #[prost(string, tag = "1")]
    pub r#type: ::prost::alloc::string::String,
    /// Function definition
    #[prost(message, optional, tag = "2")]
    pub function: ::core::option::Option<FunctionDefinition>,
}
/// FunctionDefinition represents a function definition
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FunctionDefinition {
    /// Function name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Function description
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Function parameters schema (JSON Schema)
    #[prost(string, tag = "3")]
    pub parameters: ::prost::alloc::string::String,
}
/// ToolChoice represents the tool choice configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToolChoice {
    /// Tool choice type
    #[prost(oneof = "tool_choice::Choice", tags = "1, 2, 3")]
    pub choice: ::core::option::Option<tool_choice::Choice>,
}
/// Nested message and enum types in `ToolChoice`.
pub mod tool_choice {
    /// Tool choice type
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Choice {
        /// Auto tool choice
        #[prost(bool, tag = "1")]
        Auto(bool),
        /// Required tool
        #[prost(string, tag = "2")]
        Required(::prost::alloc::string::String),
        /// Function tool
        #[prost(message, tag = "3")]
        Function(super::FunctionToolChoice),
    }
}
/// FunctionToolChoice represents a function tool choice
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FunctionToolChoice {
    /// Function name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// ChatCompletionResponse represents a chat completion response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionResponse {
    /// Response ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Response object type
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    /// Response creation timestamp
    #[prost(int64, tag = "3")]
    pub created: i64,
    /// Model used for the response
    #[prost(string, tag = "4")]
    pub model: ::prost::alloc::string::String,
    /// Response choices
    #[prost(message, repeated, tag = "5")]
    pub choices: ::prost::alloc::vec::Vec<ChatCompletionChoice>,
    /// Usage statistics
    #[prost(message, optional, tag = "6")]
    pub usage: ::core::option::Option<UsageInfo>,
    /// System fingerprint
    #[prost(string, tag = "7")]
    pub system_fingerprint: ::prost::alloc::string::String,
}
/// ChatCompletionChoice represents a chat completion choice
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionChoice {
    /// Choice index
    #[prost(int32, tag = "1")]
    pub index: i32,
    /// Message in the choice
    #[prost(message, optional, tag = "2")]
    pub message: ::core::option::Option<super::super::common::v1::Message>,
    /// Finish reason
    #[prost(string, tag = "3")]
    pub finish_reason: ::prost::alloc::string::String,
    /// Logprobs (if requested)
    #[prost(message, optional, tag = "4")]
    pub logprobs: ::core::option::Option<LogprobsInfo>,
}
/// LogprobsInfo represents logprobs information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogprobsInfo {
    /// Content logprobs
    #[prost(message, repeated, tag = "1")]
    pub content: ::prost::alloc::vec::Vec<TokenLogprob>,
}
/// TokenLogprob represents token logprob information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenLogprob {
    /// Token
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Logprob
    #[prost(float, tag = "2")]
    pub logprob: f32,
    /// Top logprobs
    #[prost(map = "string, float", tag = "3")]
    pub top_logprobs: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
}
/// UsageInfo represents usage information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UsageInfo {
    /// Prompt tokens
    #[prost(uint32, tag = "1")]
    pub prompt_tokens: u32,
    /// Completion tokens
    #[prost(uint32, tag = "2")]
    pub completion_tokens: u32,
    /// Total tokens
    #[prost(uint32, tag = "3")]
    pub total_tokens: u32,
}
/// RouteRequestRequest is sent to route a request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteRequestRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Chat completion request
    #[prost(message, optional, tag = "2")]
    pub request: ::core::option::Option<ChatCompletionRequest>,
    /// Routing options
    #[prost(message, optional, tag = "3")]
    pub routing: ::core::option::Option<RoutingRequest>,
}
/// RouteRequestResponse is returned after routing a request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteRequestResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Chat completion response
    #[prost(message, optional, tag = "2")]
    pub response: ::core::option::Option<ChatCompletionResponse>,
    /// Routing metadata
    #[prost(message, optional, tag = "3")]
    pub routing_metadata: ::core::option::Option<RoutingMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// RouteRequestStreamResponse is streamed during request routing
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteRequestStreamResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Chat completion chunk
    #[prost(message, optional, tag = "2")]
    pub chunk: ::core::option::Option<ChatCompletionChunk>,
    /// Routing metadata (sent in the first chunk)
    #[prost(message, optional, tag = "3")]
    pub routing_metadata: ::core::option::Option<RoutingMetadata>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
    /// Whether this is the last chunk
    #[prost(bool, tag = "5")]
    pub done: bool,
}
/// ChatCompletionChunk represents a chunk of a chat completion response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionChunk {
    /// Chunk ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Chunk object type
    #[prost(string, tag = "2")]
    pub object: ::prost::alloc::string::String,
    /// Chunk creation timestamp
    #[prost(int64, tag = "3")]
    pub created: i64,
    /// Model used for the chunk
    #[prost(string, tag = "4")]
    pub model: ::prost::alloc::string::String,
    /// Chunk choices
    #[prost(message, repeated, tag = "5")]
    pub choices: ::prost::alloc::vec::Vec<ChatCompletionChunkChoice>,
    /// System fingerprint
    #[prost(string, tag = "6")]
    pub system_fingerprint: ::prost::alloc::string::String,
}
/// ChatCompletionChunkChoice represents a choice in a chat completion chunk
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionChunkChoice {
    /// Choice index
    #[prost(int32, tag = "1")]
    pub index: i32,
    /// Delta in the choice
    #[prost(message, optional, tag = "2")]
    pub delta: ::core::option::Option<ChatCompletionChunkDelta>,
    /// Finish reason
    #[prost(string, tag = "3")]
    pub finish_reason: ::prost::alloc::string::String,
    /// Logprobs (if requested)
    #[prost(message, optional, tag = "4")]
    pub logprobs: ::core::option::Option<LogprobsInfo>,
}
/// ChatCompletionChunkDelta represents a delta in a chat completion chunk
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatCompletionChunkDelta {
    /// Role delta
    #[prost(string, tag = "1")]
    pub role: ::prost::alloc::string::String,
    /// Content delta
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// Tool calls delta
    #[prost(message, repeated, tag = "3")]
    pub tool_calls: ::prost::alloc::vec::Vec<ToolCall>,
}
/// ToolCall represents a tool call
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ToolCall {
    /// Tool call ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Tool call type
    #[prost(string, tag = "2")]
    pub r#type: ::prost::alloc::string::String,
    /// Function call
    #[prost(message, optional, tag = "3")]
    pub function: ::core::option::Option<FunctionCall>,
}
/// FunctionCall represents a function call
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FunctionCall {
    /// Function name
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Function arguments (JSON string)
    #[prost(string, tag = "2")]
    pub arguments: ::prost::alloc::string::String,
}
/// GetRoutingStrategiesRequest is sent to get the available routing strategies
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoutingStrategiesRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
}
/// GetRoutingStrategiesResponse is returned with the available routing strategies
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoutingStrategiesResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Available routing strategies
    #[prost(message, repeated, tag = "2")]
    pub strategies: ::prost::alloc::vec::Vec<StrategyInfo>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// StrategyInfo represents information about a routing strategy
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrategyInfo {
    /// Strategy type
    #[prost(enumeration = "RoutingStrategy", tag = "1")]
    pub r#type: i32,
    /// Strategy name
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Strategy description
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Strategy configuration
    #[prost(message, optional, tag = "4")]
    pub config: ::core::option::Option<StrategyConfig>,
    /// Whether the strategy is enabled
    #[prost(bool, tag = "5")]
    pub enabled: bool,
}
/// StrategyConfig represents configuration for a routing strategy
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrategyConfig {
    /// Strategy-specific parameters
    #[prost(map = "string, string", tag = "1")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Fallback strategy to use if this strategy fails
    #[prost(enumeration = "RoutingStrategy", tag = "2")]
    pub fallback_strategy: i32,
    /// Maximum number of fallback attempts
    #[prost(uint32, tag = "3")]
    pub max_fallback_attempts: u32,
    /// Whether to include models with limited status
    #[prost(bool, tag = "4")]
    pub include_limited_models: bool,
    /// Whether to include models with high latency
    #[prost(bool, tag = "5")]
    pub include_high_latency_models: bool,
    /// Timeout for strategy execution in milliseconds
    #[prost(uint32, tag = "6")]
    pub timeout_ms: u32,
}
/// UpdateRoutingStrategyRequest is sent to update a routing strategy configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoutingStrategyRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Strategy type
    #[prost(enumeration = "RoutingStrategy", tag = "2")]
    pub r#type: i32,
    /// Strategy configuration
    #[prost(message, optional, tag = "3")]
    pub config: ::core::option::Option<StrategyConfig>,
    /// Whether to enable the strategy
    #[prost(bool, tag = "4")]
    pub enabled: bool,
}
/// UpdateRoutingStrategyResponse is returned after updating a routing strategy
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRoutingStrategyResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Updated strategy information
    #[prost(message, optional, tag = "2")]
    pub strategy: ::core::option::Option<StrategyInfo>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// ModelType represents the type of model
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ModelType {
    /// Default value, should not be used
    Unspecified = 0,
    /// Chat completion model
    Chat = 1,
    /// Text completion model
    Text = 2,
    /// Embedding model
    Embedding = 3,
    /// Image generation model
    Image = 4,
    /// Audio transcription model
    Audio = 5,
    /// Multimodal model
    Multimodal = 6,
}
impl ModelType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ModelType::Unspecified => "MODEL_TYPE_UNSPECIFIED",
            ModelType::Chat => "MODEL_TYPE_CHAT",
            ModelType::Text => "MODEL_TYPE_TEXT",
            ModelType::Embedding => "MODEL_TYPE_EMBEDDING",
            ModelType::Image => "MODEL_TYPE_IMAGE",
            ModelType::Audio => "MODEL_TYPE_AUDIO",
            ModelType::Multimodal => "MODEL_TYPE_MULTIMODAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODEL_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "MODEL_TYPE_CHAT" => Some(Self::Chat),
            "MODEL_TYPE_TEXT" => Some(Self::Text),
            "MODEL_TYPE_EMBEDDING" => Some(Self::Embedding),
            "MODEL_TYPE_IMAGE" => Some(Self::Image),
            "MODEL_TYPE_AUDIO" => Some(Self::Audio),
            "MODEL_TYPE_MULTIMODAL" => Some(Self::Multimodal),
            _ => None,
        }
    }
}
/// ModelStatus represents the status of a model
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ModelStatus {
    /// Default value, should not be used
    Unspecified = 0,
    /// Model is available
    Available = 1,
    /// Model is unavailable
    Unavailable = 2,
    /// Model is in maintenance
    Maintenance = 3,
    /// Model is deprecated
    Deprecated = 4,
    /// Model is limited (e.g., rate limited)
    Limited = 5,
}
impl ModelStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ModelStatus::Unspecified => "MODEL_STATUS_UNSPECIFIED",
            ModelStatus::Available => "MODEL_STATUS_AVAILABLE",
            ModelStatus::Unavailable => "MODEL_STATUS_UNAVAILABLE",
            ModelStatus::Maintenance => "MODEL_STATUS_MAINTENANCE",
            ModelStatus::Deprecated => "MODEL_STATUS_DEPRECATED",
            ModelStatus::Limited => "MODEL_STATUS_LIMITED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODEL_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "MODEL_STATUS_AVAILABLE" => Some(Self::Available),
            "MODEL_STATUS_UNAVAILABLE" => Some(Self::Unavailable),
            "MODEL_STATUS_MAINTENANCE" => Some(Self::Maintenance),
            "MODEL_STATUS_DEPRECATED" => Some(Self::Deprecated),
            "MODEL_STATUS_LIMITED" => Some(Self::Limited),
            _ => None,
        }
    }
}
/// RoutingStrategy represents a routing strategy
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RoutingStrategy {
    /// Default value, should not be used
    Unspecified = 0,
    /// Round-robin distribution across models
    RoundRobin = 1,
    /// Load-balanced distribution based on model availability and capacity
    LoadBalanced = 2,
    /// Content-based routing using request analysis
    ContentBased = 3,
    /// Cost-optimized routing to minimize token costs
    CostOptimized = 4,
    /// Latency-optimized routing for fastest response times
    LatencyOptimized = 5,
    /// Custom strategy
    Custom = 6,
}
impl RoutingStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RoutingStrategy::Unspecified => "ROUTING_STRATEGY_UNSPECIFIED",
            RoutingStrategy::RoundRobin => "ROUTING_STRATEGY_ROUND_ROBIN",
            RoutingStrategy::LoadBalanced => "ROUTING_STRATEGY_LOAD_BALANCED",
            RoutingStrategy::ContentBased => "ROUTING_STRATEGY_CONTENT_BASED",
            RoutingStrategy::CostOptimized => "ROUTING_STRATEGY_COST_OPTIMIZED",
            RoutingStrategy::LatencyOptimized => "ROUTING_STRATEGY_LATENCY_OPTIMIZED",
            RoutingStrategy::Custom => "ROUTING_STRATEGY_CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROUTING_STRATEGY_UNSPECIFIED" => Some(Self::Unspecified),
            "ROUTING_STRATEGY_ROUND_ROBIN" => Some(Self::RoundRobin),
            "ROUTING_STRATEGY_LOAD_BALANCED" => Some(Self::LoadBalanced),
            "ROUTING_STRATEGY_CONTENT_BASED" => Some(Self::ContentBased),
            "ROUTING_STRATEGY_COST_OPTIMIZED" => Some(Self::CostOptimized),
            "ROUTING_STRATEGY_LATENCY_OPTIMIZED" => Some(Self::LatencyOptimized),
            "ROUTING_STRATEGY_CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod model_registry_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// ModelRegistryService provides methods for model registry operations
    #[derive(Debug, Clone)]
    pub struct ModelRegistryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ModelRegistryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ModelRegistryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ModelRegistryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ModelRegistryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// RegisterModel registers a model in the registry
        pub async fn register_model(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterModelResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/RegisterModel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "RegisterModel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetModel gets a model by ID
        pub async fn get_model(
            &mut self,
            request: impl tonic::IntoRequest<super::GetModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetModelResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/GetModel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "GetModel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateModel updates a model in the registry
        pub async fn update_model(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateModelResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/UpdateModel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "UpdateModel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// RemoveModel removes a model from the registry
        pub async fn remove_model(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveModelResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/RemoveModel",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "RemoveModel",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ListModels lists all models in the registry
        pub async fn list_models(
            &mut self,
            request: impl tonic::IntoRequest<super::ListModelsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListModelsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/ListModels",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "ListModels",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FindModels finds models matching a filter
        pub async fn find_models(
            &mut self,
            request: impl tonic::IntoRequest<super::FindModelsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindModelsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/FindModels",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "FindModels",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateModelStatus updates a model's status
        pub async fn update_model_status(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateModelStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateModelStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/UpdateModelStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "UpdateModelStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CheckModelHealth checks a model's health
        pub async fn check_model_health(
            &mut self,
            request: impl tonic::IntoRequest<super::CheckModelHealthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckModelHealthResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.ModelRegistryService/CheckModelHealth",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.ModelRegistryService",
                        "CheckModelHealth",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod router_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// RouterService provides methods for routing operations
    #[derive(Debug, Clone)]
    pub struct RouterServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RouterServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RouterServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RouterServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            RouterServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// RouteRequest routes a request to the appropriate model
        pub async fn route_request(
            &mut self,
            request: impl tonic::IntoRequest<super::RouteRequestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RouteRequestResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.RouterService/RouteRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.RouterService",
                        "RouteRequest",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// StreamRouteRequest routes a request and streams the response
        pub async fn stream_route_request(
            &mut self,
            request: impl tonic::IntoRequest<super::RouteRequestRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::RouteRequestStreamResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.RouterService/StreamRouteRequest",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.RouterService",
                        "StreamRouteRequest",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        /// GetRoutingStrategies gets the available routing strategies
        pub async fn get_routing_strategies(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRoutingStrategiesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRoutingStrategiesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.RouterService/GetRoutingStrategies",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.RouterService",
                        "GetRoutingStrategies",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UpdateRoutingStrategy updates a routing strategy configuration
        pub async fn update_routing_strategy(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateRoutingStrategyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateRoutingStrategyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.model_registry.v1.RouterService/UpdateRoutingStrategy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.model_registry.v1.RouterService",
                        "UpdateRoutingStrategy",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod model_registry_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ModelRegistryServiceServer.
    #[async_trait]
    pub trait ModelRegistryService: Send + Sync + 'static {
        /// RegisterModel registers a model in the registry
        async fn register_model(
            &self,
            request: tonic::Request<super::RegisterModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterModelResponse>,
            tonic::Status,
        >;
        /// GetModel gets a model by ID
        async fn get_model(
            &self,
            request: tonic::Request<super::GetModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetModelResponse>,
            tonic::Status,
        >;
        /// UpdateModel updates a model in the registry
        async fn update_model(
            &self,
            request: tonic::Request<super::UpdateModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateModelResponse>,
            tonic::Status,
        >;
        /// RemoveModel removes a model from the registry
        async fn remove_model(
            &self,
            request: tonic::Request<super::RemoveModelRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveModelResponse>,
            tonic::Status,
        >;
        /// ListModels lists all models in the registry
        async fn list_models(
            &self,
            request: tonic::Request<super::ListModelsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListModelsResponse>,
            tonic::Status,
        >;
        /// FindModels finds models matching a filter
        async fn find_models(
            &self,
            request: tonic::Request<super::FindModelsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindModelsResponse>,
            tonic::Status,
        >;
        /// UpdateModelStatus updates a model's status
        async fn update_model_status(
            &self,
            request: tonic::Request<super::UpdateModelStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateModelStatusResponse>,
            tonic::Status,
        >;
        /// CheckModelHealth checks a model's health
        async fn check_model_health(
            &self,
            request: tonic::Request<super::CheckModelHealthRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CheckModelHealthResponse>,
            tonic::Status,
        >;
    }
    /// ModelRegistryService provides methods for model registry operations
    #[derive(Debug)]
    pub struct ModelRegistryServiceServer<T: ModelRegistryService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ModelRegistryService> ModelRegistryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ModelRegistryServiceServer<T>
    where
        T: ModelRegistryService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/intellirouter.model_registry.v1.ModelRegistryService/RegisterModel" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterModelSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::RegisterModelRequest>
                    for RegisterModelSvc<T> {
                        type Response = super::RegisterModelResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterModelRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::register_model(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RegisterModelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/GetModel" => {
                    #[allow(non_camel_case_types)]
                    struct GetModelSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::GetModelRequest>
                    for GetModelSvc<T> {
                        type Response = super::GetModelResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetModelRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::get_model(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetModelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/UpdateModel" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateModelSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::UpdateModelRequest>
                    for UpdateModelSvc<T> {
                        type Response = super::UpdateModelResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateModelRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::update_model(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateModelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/RemoveModel" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveModelSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::RemoveModelRequest>
                    for RemoveModelSvc<T> {
                        type Response = super::RemoveModelResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveModelRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::remove_model(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RemoveModelSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/ListModels" => {
                    #[allow(non_camel_case_types)]
                    struct ListModelsSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::ListModelsRequest>
                    for ListModelsSvc<T> {
                        type Response = super::ListModelsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListModelsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::list_models(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListModelsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/FindModels" => {
                    #[allow(non_camel_case_types)]
                    struct FindModelsSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::FindModelsRequest>
                    for FindModelsSvc<T> {
                        type Response = super::FindModelsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindModelsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::find_models(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = FindModelsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/UpdateModelStatus" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateModelStatusSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::UpdateModelStatusRequest>
                    for UpdateModelStatusSvc<T> {
                        type Response = super::UpdateModelStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateModelStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::update_model_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateModelStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.ModelRegistryService/CheckModelHealth" => {
                    #[allow(non_camel_case_types)]
                    struct CheckModelHealthSvc<T: ModelRegistryService>(pub Arc<T>);
                    impl<
                        T: ModelRegistryService,
                    > tonic::server::UnaryService<super::CheckModelHealthRequest>
                    for CheckModelHealthSvc<T> {
                        type Response = super::CheckModelHealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CheckModelHealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ModelRegistryService>::check_model_health(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CheckModelHealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ModelRegistryService> Clone for ModelRegistryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ModelRegistryService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ModelRegistryService> tonic::server::NamedService
    for ModelRegistryServiceServer<T> {
        const NAME: &'static str = "intellirouter.model_registry.v1.ModelRegistryService";
    }
}
/// Generated server implementations.
pub mod router_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RouterServiceServer.
    #[async_trait]
    pub trait RouterService: Send + Sync + 'static {
        /// RouteRequest routes a request to the appropriate model
        async fn route_request(
            &self,
            request: tonic::Request<super::RouteRequestRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RouteRequestResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamRouteRequest method.
        type StreamRouteRequestStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::RouteRequestStreamResponse,
                    tonic::Status,
                >,
            >
            + Send
            + 'static;
        /// StreamRouteRequest routes a request and streams the response
        async fn stream_route_request(
            &self,
            request: tonic::Request<super::RouteRequestRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamRouteRequestStream>,
            tonic::Status,
        >;
        /// GetRoutingStrategies gets the available routing strategies
        async fn get_routing_strategies(
            &self,
            request: tonic::Request<super::GetRoutingStrategiesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRoutingStrategiesResponse>,
            tonic::Status,
        >;
        /// UpdateRoutingStrategy updates a routing strategy configuration
        async fn update_routing_strategy(
            &self,
            request: tonic::Request<super::UpdateRoutingStrategyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateRoutingStrategyResponse>,
            tonic::Status,
        >;
    }
    /// RouterService provides methods for routing operations
    #[derive(Debug)]
    pub struct RouterServiceServer<T: RouterService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: RouterService> RouterServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RouterServiceServer<T>
    where
        T: RouterService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/intellirouter.model_registry.v1.RouterService/RouteRequest" => {
                    #[allow(non_camel_case_types)]
                    struct RouteRequestSvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::UnaryService<super::RouteRequestRequest>
                    for RouteRequestSvc<T> {
                        type Response = super::RouteRequestResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RouteRequestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::route_request(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RouteRequestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.RouterService/StreamRouteRequest" => {
                    #[allow(non_camel_case_types)]
                    struct StreamRouteRequestSvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::ServerStreamingService<super::RouteRequestRequest>
                    for StreamRouteRequestSvc<T> {
                        type Response = super::RouteRequestStreamResponse;
                        type ResponseStream = T::StreamRouteRequestStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RouteRequestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::stream_route_request(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamRouteRequestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.RouterService/GetRoutingStrategies" => {
                    #[allow(non_camel_case_types)]
                    struct GetRoutingStrategiesSvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::UnaryService<super::GetRoutingStrategiesRequest>
                    for GetRoutingStrategiesSvc<T> {
                        type Response = super::GetRoutingStrategiesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRoutingStrategiesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::get_routing_strategies(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetRoutingStrategiesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.model_registry.v1.RouterService/UpdateRoutingStrategy" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateRoutingStrategySvc<T: RouterService>(pub Arc<T>);
                    impl<
                        T: RouterService,
                    > tonic::server::UnaryService<super::UpdateRoutingStrategyRequest>
                    for UpdateRoutingStrategySvc<T> {
                        type Response = super::UpdateRoutingStrategyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateRoutingStrategyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RouterService>::update_routing_strategy(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UpdateRoutingStrategySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: RouterService> Clone for RouterServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: RouterService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: RouterService> tonic::server::NamedService for RouterServiceServer<T> {
        const NAME: &'static str = "intellirouter.model_registry.v1.RouterService";
    }
}
