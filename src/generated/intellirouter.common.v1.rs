// This file is @generated by prost-build.
/// ErrorDetails provides additional information about an error
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorDetails {
    /// Error code
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    /// Error message
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Additional details about the error
    #[prost(message, optional, tag = "3")]
    pub details: ::core::option::Option<::prost_types::Struct>,
    /// Stack trace (for debugging)
    #[prost(string, tag = "4")]
    pub stack_trace: ::prost::alloc::string::String,
}
/// Metadata contains key-value pairs for additional information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    /// Map of metadata key-value pairs
    #[prost(map = "string, string", tag = "1")]
    pub values: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Message represents a chat message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// Role of the message sender (e.g., "user", "assistant", "system")
    #[prost(string, tag = "1")]
    pub role: ::prost::alloc::string::String,
    /// Content of the message
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// When the message was created
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Additional metadata about the message
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// ModelInfo contains information about a model
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModelInfo {
    /// Unique identifier for the model
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Name of the model
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// Provider of the model (e.g., "openai", "anthropic")
    #[prost(string, tag = "3")]
    pub provider: ::prost::alloc::string::String,
    /// Version of the model
    #[prost(string, tag = "4")]
    pub version: ::prost::alloc::string::String,
    /// Maximum context window size in tokens
    #[prost(uint32, tag = "5")]
    pub context_window: u32,
    /// Model capabilities
    #[prost(string, repeated, tag = "6")]
    pub capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Model type (e.g., "chat", "embedding", "image")
    #[prost(string, tag = "7")]
    pub r#type: ::prost::alloc::string::String,
    /// Additional metadata about the model
    #[prost(message, optional, tag = "8")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// RequestContext contains information about the request context
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestContext {
    /// Unique identifier for the request
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    /// User identifier
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    /// Organization identifier
    #[prost(string, tag = "3")]
    pub org_id: ::prost::alloc::string::String,
    /// When the request was created
    #[prost(message, optional, tag = "4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Request priority (higher values indicate higher priority)
    #[prost(uint32, tag = "5")]
    pub priority: u32,
    /// Request tags for categorization
    #[prost(string, repeated, tag = "6")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Additional metadata about the request
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// VersionInfo contains version information for schema evolution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionInfo {
    /// Major version number
    #[prost(uint32, tag = "1")]
    pub major: u32,
    /// Minor version number
    #[prost(uint32, tag = "2")]
    pub minor: u32,
    /// Patch version number
    #[prost(uint32, tag = "3")]
    pub patch: u32,
}
/// Status represents the status of an operation
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    /// Default value, should not be used
    Unspecified = 0,
    /// Operation succeeded
    Success = 1,
    /// Operation failed
    Error = 2,
    /// Operation is in progress
    InProgress = 3,
    /// Operation timed out
    Timeout = 4,
    /// Operation was cancelled
    Cancelled = 5,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unspecified => "STATUS_UNSPECIFIED",
            Status::Success => "STATUS_SUCCESS",
            Status::Error => "STATUS_ERROR",
            Status::InProgress => "STATUS_IN_PROGRESS",
            Status::Timeout => "STATUS_TIMEOUT",
            Status::Cancelled => "STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_SUCCESS" => Some(Self::Success),
            "STATUS_ERROR" => Some(Self::Error),
            "STATUS_IN_PROGRESS" => Some(Self::InProgress),
            "STATUS_TIMEOUT" => Some(Self::Timeout),
            "STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
