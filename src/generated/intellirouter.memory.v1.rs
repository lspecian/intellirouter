// This file is @generated by prost-build.
/// Message represents a message in a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// Role of the message sender (e.g., "user", "assistant", "system")
    #[prost(string, tag = "1")]
    pub role: ::prost::alloc::string::String,
    /// Content of the message
    #[prost(string, tag = "2")]
    pub content: ::prost::alloc::string::String,
    /// When the message was created
    #[prost(message, optional, tag = "3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Additional metadata about the message
    #[prost(map = "string, string", tag = "4")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Message ID
    #[prost(string, tag = "5")]
    pub id: ::prost::alloc::string::String,
    /// Parent message ID (for threaded conversations)
    #[prost(string, tag = "6")]
    pub parent_id: ::prost::alloc::string::String,
    /// Token count (if available)
    #[prost(uint32, tag = "7")]
    pub token_count: u32,
}
/// Conversation represents a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Conversation {
    /// Unique identifier for the conversation
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Messages in the conversation
    #[prost(message, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<Message>,
    /// Additional metadata about the conversation
    #[prost(map = "string, string", tag = "3")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// When the conversation was created
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    /// When the conversation was last updated
    #[prost(message, optional, tag = "5")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// User ID associated with the conversation
    #[prost(string, tag = "6")]
    pub user_id: ::prost::alloc::string::String,
    /// Title of the conversation (if available)
    #[prost(string, tag = "7")]
    pub title: ::prost::alloc::string::String,
    /// Tags for categorization
    #[prost(string, repeated, tag = "8")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// CreateConversationRequest is sent to create a new conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Initial metadata for the conversation
    #[prost(map = "string, string", tag = "2")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// User ID to associate with the conversation
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    /// Initial title for the conversation (optional)
    #[prost(string, tag = "4")]
    pub title: ::prost::alloc::string::String,
    /// Initial tags for the conversation
    #[prost(string, repeated, tag = "5")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Initial messages for the conversation
    #[prost(message, repeated, tag = "6")]
    pub initial_messages: ::prost::alloc::vec::Vec<Message>,
}
/// CreateConversationResponse is returned after creating a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Created conversation
    #[prost(message, optional, tag = "2")]
    pub conversation: ::core::option::Option<Conversation>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// GetConversationRequest is sent to get a conversation by ID
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
/// GetConversationResponse is returned with the requested conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Conversation
    #[prost(message, optional, tag = "2")]
    pub conversation: ::core::option::Option<Conversation>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// AddMessageRequest is sent to add a message to a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMessageRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Role of the message sender
    #[prost(string, tag = "3")]
    pub role: ::prost::alloc::string::String,
    /// Content of the message
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
    /// Additional metadata about the message
    #[prost(map = "string, string", tag = "5")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Parent message ID (for threaded conversations)
    #[prost(string, tag = "6")]
    pub parent_id: ::prost::alloc::string::String,
}
/// AddMessageResponse is returned after adding a message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddMessageResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Added message
    #[prost(message, optional, tag = "2")]
    pub message: ::core::option::Option<Message>,
    /// Updated conversation
    #[prost(message, optional, tag = "3")]
    pub conversation: ::core::option::Option<Conversation>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// GetHistoryRequest is sent to get the conversation history
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHistoryRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Maximum number of tokens to include
    #[prost(uint32, tag = "3")]
    pub max_tokens: u32,
    /// Maximum number of messages to include
    #[prost(uint32, tag = "4")]
    pub max_messages: u32,
    /// Whether to include system messages
    #[prost(bool, tag = "5")]
    pub include_system_messages: bool,
    /// Format for the history (e.g., "openai", "anthropic", "raw")
    #[prost(string, tag = "6")]
    pub format: ::prost::alloc::string::String,
}
/// GetHistoryResponse is returned with the conversation history
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHistoryResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Messages in the conversation history
    #[prost(message, repeated, tag = "2")]
    pub messages: ::prost::alloc::vec::Vec<Message>,
    /// Total token count
    #[prost(uint32, tag = "3")]
    pub total_tokens: u32,
    /// Formatted history (if format was specified)
    #[prost(string, tag = "4")]
    pub formatted_history: ::prost::alloc::string::String,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// SaveConversationRequest is sent to save a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
/// SaveConversationResponse is returned after saving a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// LoadConversationRequest is sent to load a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
/// LoadConversationResponse is returned with the loaded conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoadConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Loaded conversation
    #[prost(message, optional, tag = "2")]
    pub conversation: ::core::option::Option<Conversation>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// DeleteConversationRequest is sent to delete a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
/// DeleteConversationResponse is returned after deleting a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "2")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// ListConversationsRequest is sent to list conversations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConversationsRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Maximum number of conversations to return
    #[prost(uint32, tag = "2")]
    pub limit: u32,
    /// Offset for pagination
    #[prost(uint32, tag = "3")]
    pub offset: u32,
    /// Filter by user ID
    #[prost(string, tag = "4")]
    pub user_id: ::prost::alloc::string::String,
    /// Filter by tags
    #[prost(string, repeated, tag = "5")]
    pub tag_filter: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Filter by date range (start)
    #[prost(message, optional, tag = "6")]
    pub start_date: ::core::option::Option<::prost_types::Timestamp>,
    /// Filter by date range (end)
    #[prost(message, optional, tag = "7")]
    pub end_date: ::core::option::Option<::prost_types::Timestamp>,
}
/// ListConversationsResponse is returned with the list of conversations
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConversationsResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Conversations
    #[prost(message, repeated, tag = "2")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
    /// Total number of conversations matching the filter
    #[prost(uint32, tag = "3")]
    pub total_count: u32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// SearchMessagesRequest is sent to search for messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMessagesRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Search query
    #[prost(string, tag = "2")]
    pub query: ::prost::alloc::string::String,
    /// Maximum number of results to return
    #[prost(uint32, tag = "3")]
    pub limit: u32,
    /// Offset for pagination
    #[prost(uint32, tag = "4")]
    pub offset: u32,
    /// Filter by conversation ID
    #[prost(string, tag = "5")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Filter by user ID
    #[prost(string, tag = "6")]
    pub user_id: ::prost::alloc::string::String,
    /// Filter by role
    #[prost(string, tag = "7")]
    pub role: ::prost::alloc::string::String,
    /// Filter by date range (start)
    #[prost(message, optional, tag = "8")]
    pub start_date: ::core::option::Option<::prost_types::Timestamp>,
    /// Filter by date range (end)
    #[prost(message, optional, tag = "9")]
    pub end_date: ::core::option::Option<::prost_types::Timestamp>,
}
/// SearchMessagesResponse is returned with the search results
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMessagesResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Messages matching the search query
    #[prost(message, repeated, tag = "2")]
    pub results: ::prost::alloc::vec::Vec<MessageSearchResult>,
    /// Total number of messages matching the search query
    #[prost(uint32, tag = "3")]
    pub total_count: u32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// MessageSearchResult represents a message search result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSearchResult {
    /// Message
    #[prost(message, optional, tag = "1")]
    pub message: ::core::option::Option<Message>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Conversation title
    #[prost(string, tag = "3")]
    pub conversation_title: ::prost::alloc::string::String,
    /// Relevance score (0.0 to 1.0)
    #[prost(float, tag = "4")]
    pub score: f32,
    /// Highlighted content with search matches
    #[prost(string, tag = "5")]
    pub highlighted_content: ::prost::alloc::string::String,
}
/// GetConversationHistoryForChainRequest is sent to get conversation history for a chain
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationHistoryForChainRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Chain ID
    #[prost(string, tag = "3")]
    pub chain_id: ::prost::alloc::string::String,
    /// Maximum number of tokens to include
    #[prost(uint32, tag = "4")]
    pub max_tokens: u32,
    /// Maximum number of messages to include
    #[prost(uint32, tag = "5")]
    pub max_messages: u32,
    /// Whether to include system messages
    #[prost(bool, tag = "6")]
    pub include_system_messages: bool,
    /// Format for the history (e.g., "openai", "anthropic", "raw")
    #[prost(string, tag = "7")]
    pub format: ::prost::alloc::string::String,
    /// Additional context to include
    #[prost(string, tag = "8")]
    pub additional_context: ::prost::alloc::string::String,
}
/// GetConversationHistoryForChainResponse is returned with the conversation history for a chain
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationHistoryForChainResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Formatted history for the chain
    #[prost(string, tag = "2")]
    pub formatted_history: ::prost::alloc::string::String,
    /// Messages included in the history
    #[prost(message, repeated, tag = "3")]
    pub messages: ::prost::alloc::vec::Vec<super::super::common::v1::Message>,
    /// Total token count
    #[prost(uint32, tag = "4")]
    pub total_tokens: u32,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "5")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// StepResult represents the result of a chain step
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepResult {
    /// Step ID
    #[prost(string, tag = "1")]
    pub step_id: ::prost::alloc::string::String,
    /// Step name
    #[prost(string, tag = "2")]
    pub step_name: ::prost::alloc::string::String,
    /// Input to the step
    #[prost(string, tag = "3")]
    pub input: ::prost::alloc::string::String,
    /// Output from the step
    #[prost(string, tag = "4")]
    pub output: ::prost::alloc::string::String,
    /// Model used for this step
    #[prost(string, tag = "5")]
    pub model: ::prost::alloc::string::String,
}
/// StoreChainResultInConversationRequest is sent to store a chain result in a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChainResultInConversationRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Chain ID
    #[prost(string, tag = "3")]
    pub chain_id: ::prost::alloc::string::String,
    /// Chain execution ID
    #[prost(string, tag = "4")]
    pub execution_id: ::prost::alloc::string::String,
    /// Chain result
    #[prost(string, tag = "5")]
    pub result: ::prost::alloc::string::String,
    /// Step results to store as separate messages
    #[prost(message, repeated, tag = "6")]
    pub step_results: ::prost::alloc::vec::Vec<StepResult>,
    /// Whether to store step results as separate messages
    #[prost(bool, tag = "7")]
    pub store_step_results: bool,
    /// Additional metadata about the chain execution
    #[prost(map = "string, string", tag = "8")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// StoreChainResultInConversationResponse is returned after storing a chain result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoreChainResultInConversationResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Added message ID
    #[prost(string, tag = "2")]
    pub message_id: ::prost::alloc::string::String,
    /// Added step message IDs (if store_step_results was true)
    #[prost(string, repeated, tag = "3")]
    pub step_message_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "4")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// CreateConversationFromChainExecutionRequest is sent to create a conversation from a chain execution
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConversationFromChainExecutionRequest {
    /// Request context
    #[prost(message, optional, tag = "1")]
    pub context: ::core::option::Option<super::super::common::v1::RequestContext>,
    /// Chain ID
    #[prost(string, tag = "2")]
    pub chain_id: ::prost::alloc::string::String,
    /// Chain execution ID
    #[prost(string, tag = "3")]
    pub execution_id: ::prost::alloc::string::String,
    /// Chain input
    #[prost(string, tag = "4")]
    pub input: ::prost::alloc::string::String,
    /// Chain result
    #[prost(string, tag = "5")]
    pub result: ::prost::alloc::string::String,
    /// Step results to store as separate messages
    #[prost(message, repeated, tag = "6")]
    pub step_results: ::prost::alloc::vec::Vec<StepResult>,
    /// Whether to store step results as separate messages
    #[prost(bool, tag = "7")]
    pub store_step_results: bool,
    /// User ID to associate with the conversation
    #[prost(string, tag = "8")]
    pub user_id: ::prost::alloc::string::String,
    /// Title for the conversation
    #[prost(string, tag = "9")]
    pub title: ::prost::alloc::string::String,
    /// Tags for the conversation
    #[prost(string, repeated, tag = "10")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Additional metadata about the conversation
    #[prost(map = "string, string", tag = "11")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// CreateConversationFromChainExecutionResponse is returned after creating a conversation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConversationFromChainExecutionResponse {
    /// Status of the operation
    #[prost(enumeration = "super::super::common::v1::Status", tag = "1")]
    pub status: i32,
    /// Created conversation ID
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    /// Error details (if status is ERROR)
    #[prost(message, optional, tag = "3")]
    pub error: ::core::option::Option<super::super::common::v1::ErrorDetails>,
}
/// Generated client implementations.
pub mod memory_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// MemoryService provides methods for conversation history and memory management
    #[derive(Debug, Clone)]
    pub struct MemoryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MemoryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MemoryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MemoryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MemoryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CreateConversation creates a new conversation
        pub async fn create_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/CreateConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "CreateConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetConversation gets a conversation by ID
        pub async fn get_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/GetConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "GetConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// AddMessage adds a message to a conversation
        pub async fn add_message(
            &mut self,
            request: impl tonic::IntoRequest<super::AddMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddMessageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/AddMessage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "AddMessage",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetHistory gets the conversation history formatted for an LLM request
        pub async fn get_history(
            &mut self,
            request: impl tonic::IntoRequest<super::GetHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetHistoryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/GetHistory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "GetHistory",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SaveConversation saves a conversation to persistent storage
        pub async fn save_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::SaveConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/SaveConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "SaveConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// LoadConversation loads a conversation from persistent storage
        pub async fn load_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::LoadConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/LoadConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "LoadConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// DeleteConversation deletes a conversation
        pub async fn delete_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/DeleteConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "DeleteConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ListConversations lists all conversations
        pub async fn list_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::ListConversationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConversationsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/ListConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "ListConversations",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// SearchMessages searches for messages across conversations
        pub async fn search_messages(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchMessagesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryService/SearchMessages",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryService",
                        "SearchMessages",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod memory_chain_integration_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// MemoryChainIntegrationService provides methods for integrating Memory and Chain Engine
    #[derive(Debug, Clone)]
    pub struct MemoryChainIntegrationServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MemoryChainIntegrationServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MemoryChainIntegrationServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MemoryChainIntegrationServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MemoryChainIntegrationServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// GetConversationHistoryForChain gets conversation history formatted for a chain
        pub async fn get_conversation_history_for_chain(
            &mut self,
            request: impl tonic::IntoRequest<
                super::GetConversationHistoryForChainRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationHistoryForChainResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryChainIntegrationService/GetConversationHistoryForChain",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryChainIntegrationService",
                        "GetConversationHistoryForChain",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// StoreChainResultInConversation stores a chain result in a conversation
        pub async fn store_chain_result_in_conversation(
            &mut self,
            request: impl tonic::IntoRequest<
                super::StoreChainResultInConversationRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::StoreChainResultInConversationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryChainIntegrationService/StoreChainResultInConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryChainIntegrationService",
                        "StoreChainResultInConversation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CreateConversationFromChainExecution creates a new conversation from a chain execution
        pub async fn create_conversation_from_chain_execution(
            &mut self,
            request: impl tonic::IntoRequest<
                super::CreateConversationFromChainExecutionRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::CreateConversationFromChainExecutionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/intellirouter.memory.v1.MemoryChainIntegrationService/CreateConversationFromChainExecution",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "intellirouter.memory.v1.MemoryChainIntegrationService",
                        "CreateConversationFromChainExecution",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod memory_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MemoryServiceServer.
    #[async_trait]
    pub trait MemoryService: Send + Sync + 'static {
        /// CreateConversation creates a new conversation
        async fn create_conversation(
            &self,
            request: tonic::Request<super::CreateConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateConversationResponse>,
            tonic::Status,
        >;
        /// GetConversation gets a conversation by ID
        async fn get_conversation(
            &self,
            request: tonic::Request<super::GetConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationResponse>,
            tonic::Status,
        >;
        /// AddMessage adds a message to a conversation
        async fn add_message(
            &self,
            request: tonic::Request<super::AddMessageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddMessageResponse>,
            tonic::Status,
        >;
        /// GetHistory gets the conversation history formatted for an LLM request
        async fn get_history(
            &self,
            request: tonic::Request<super::GetHistoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetHistoryResponse>,
            tonic::Status,
        >;
        /// SaveConversation saves a conversation to persistent storage
        async fn save_conversation(
            &self,
            request: tonic::Request<super::SaveConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SaveConversationResponse>,
            tonic::Status,
        >;
        /// LoadConversation loads a conversation from persistent storage
        async fn load_conversation(
            &self,
            request: tonic::Request<super::LoadConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LoadConversationResponse>,
            tonic::Status,
        >;
        /// DeleteConversation deletes a conversation
        async fn delete_conversation(
            &self,
            request: tonic::Request<super::DeleteConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteConversationResponse>,
            tonic::Status,
        >;
        /// ListConversations lists all conversations
        async fn list_conversations(
            &self,
            request: tonic::Request<super::ListConversationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConversationsResponse>,
            tonic::Status,
        >;
        /// SearchMessages searches for messages across conversations
        async fn search_messages(
            &self,
            request: tonic::Request<super::SearchMessagesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchMessagesResponse>,
            tonic::Status,
        >;
    }
    /// MemoryService provides methods for conversation history and memory management
    #[derive(Debug)]
    pub struct MemoryServiceServer<T: MemoryService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MemoryService> MemoryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MemoryServiceServer<T>
    where
        T: MemoryService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/intellirouter.memory.v1.MemoryService/CreateConversation" => {
                    #[allow(non_camel_case_types)]
                    struct CreateConversationSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::CreateConversationRequest>
                    for CreateConversationSvc<T> {
                        type Response = super::CreateConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateConversationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::create_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/GetConversation" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::GetConversationRequest>
                    for GetConversationSvc<T> {
                        type Response = super::GetConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::get_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/AddMessage" => {
                    #[allow(non_camel_case_types)]
                    struct AddMessageSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::AddMessageRequest>
                    for AddMessageSvc<T> {
                        type Response = super::AddMessageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddMessageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::add_message(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddMessageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/GetHistory" => {
                    #[allow(non_camel_case_types)]
                    struct GetHistorySvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::GetHistoryRequest>
                    for GetHistorySvc<T> {
                        type Response = super::GetHistoryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetHistoryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::get_history(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetHistorySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/SaveConversation" => {
                    #[allow(non_camel_case_types)]
                    struct SaveConversationSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::SaveConversationRequest>
                    for SaveConversationSvc<T> {
                        type Response = super::SaveConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SaveConversationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::save_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SaveConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/LoadConversation" => {
                    #[allow(non_camel_case_types)]
                    struct LoadConversationSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::LoadConversationRequest>
                    for LoadConversationSvc<T> {
                        type Response = super::LoadConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoadConversationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::load_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LoadConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/DeleteConversation" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteConversationSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::DeleteConversationRequest>
                    for DeleteConversationSvc<T> {
                        type Response = super::DeleteConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteConversationRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::delete_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/ListConversations" => {
                    #[allow(non_camel_case_types)]
                    struct ListConversationsSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::ListConversationsRequest>
                    for ListConversationsSvc<T> {
                        type Response = super::ListConversationsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListConversationsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::list_conversations(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ListConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryService/SearchMessages" => {
                    #[allow(non_camel_case_types)]
                    struct SearchMessagesSvc<T: MemoryService>(pub Arc<T>);
                    impl<
                        T: MemoryService,
                    > tonic::server::UnaryService<super::SearchMessagesRequest>
                    for SearchMessagesSvc<T> {
                        type Response = super::SearchMessagesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchMessagesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryService>::search_messages(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SearchMessagesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MemoryService> Clone for MemoryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MemoryService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MemoryService> tonic::server::NamedService for MemoryServiceServer<T> {
        const NAME: &'static str = "intellirouter.memory.v1.MemoryService";
    }
}
/// Generated server implementations.
pub mod memory_chain_integration_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MemoryChainIntegrationServiceServer.
    #[async_trait]
    pub trait MemoryChainIntegrationService: Send + Sync + 'static {
        /// GetConversationHistoryForChain gets conversation history formatted for a chain
        async fn get_conversation_history_for_chain(
            &self,
            request: tonic::Request<super::GetConversationHistoryForChainRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationHistoryForChainResponse>,
            tonic::Status,
        >;
        /// StoreChainResultInConversation stores a chain result in a conversation
        async fn store_chain_result_in_conversation(
            &self,
            request: tonic::Request<super::StoreChainResultInConversationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StoreChainResultInConversationResponse>,
            tonic::Status,
        >;
        /// CreateConversationFromChainExecution creates a new conversation from a chain execution
        async fn create_conversation_from_chain_execution(
            &self,
            request: tonic::Request<super::CreateConversationFromChainExecutionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateConversationFromChainExecutionResponse>,
            tonic::Status,
        >;
    }
    /// MemoryChainIntegrationService provides methods for integrating Memory and Chain Engine
    #[derive(Debug)]
    pub struct MemoryChainIntegrationServiceServer<T: MemoryChainIntegrationService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MemoryChainIntegrationService> MemoryChainIntegrationServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for MemoryChainIntegrationServiceServer<T>
    where
        T: MemoryChainIntegrationService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/intellirouter.memory.v1.MemoryChainIntegrationService/GetConversationHistoryForChain" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationHistoryForChainSvc<
                        T: MemoryChainIntegrationService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: MemoryChainIntegrationService,
                    > tonic::server::UnaryService<
                        super::GetConversationHistoryForChainRequest,
                    > for GetConversationHistoryForChainSvc<T> {
                        type Response = super::GetConversationHistoryForChainResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetConversationHistoryForChainRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryChainIntegrationService>::get_conversation_history_for_chain(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetConversationHistoryForChainSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryChainIntegrationService/StoreChainResultInConversation" => {
                    #[allow(non_camel_case_types)]
                    struct StoreChainResultInConversationSvc<
                        T: MemoryChainIntegrationService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: MemoryChainIntegrationService,
                    > tonic::server::UnaryService<
                        super::StoreChainResultInConversationRequest,
                    > for StoreChainResultInConversationSvc<T> {
                        type Response = super::StoreChainResultInConversationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::StoreChainResultInConversationRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryChainIntegrationService>::store_chain_result_in_conversation(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StoreChainResultInConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/intellirouter.memory.v1.MemoryChainIntegrationService/CreateConversationFromChainExecution" => {
                    #[allow(non_camel_case_types)]
                    struct CreateConversationFromChainExecutionSvc<
                        T: MemoryChainIntegrationService,
                    >(
                        pub Arc<T>,
                    );
                    impl<
                        T: MemoryChainIntegrationService,
                    > tonic::server::UnaryService<
                        super::CreateConversationFromChainExecutionRequest,
                    > for CreateConversationFromChainExecutionSvc<T> {
                        type Response = super::CreateConversationFromChainExecutionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreateConversationFromChainExecutionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MemoryChainIntegrationService>::create_conversation_from_chain_execution(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateConversationFromChainExecutionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MemoryChainIntegrationService> Clone
    for MemoryChainIntegrationServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MemoryChainIntegrationService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MemoryChainIntegrationService> tonic::server::NamedService
    for MemoryChainIntegrationServiceServer<T> {
        const NAME: &'static str = "intellirouter.memory.v1.MemoryChainIntegrationService";
    }
}
